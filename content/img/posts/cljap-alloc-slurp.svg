<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="822.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="805" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="805" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.BufferedReader.read (1 samples, 0.42%)</title><rect x="448.1" y="213" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$TransientHashMap.doAssoc (1 samples, 0.42%)</title><rect x="308.7" y="133" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentArrayMap (12 samples, 5.06%)</title><rect x="109.6" y="117" width="59.7" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text text-anchor="" x="112.58" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojur..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.core/parse-string (86 samples, 36.29%)</title><rect x="15.0" y="309" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.core/parse-string</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (6 samples, 2.53%)</title><rect x="15.0" y="85" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >ja..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse (86 samples, 36.29%)</title><rect x="15.0" y="293" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (86 samples, 36.29%)</title><rect x="15.0" y="245" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse*</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Object[] (11 samples, 4.64%)</title><rect x="313.7" y="85" width="54.8" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text text-anchor="" x="316.71" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java...</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/persistent! (12 samples, 5.06%)</title><rect x="109.6" y="181" width="59.7" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="112.58" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojur..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (150 samples, 63.29%)</title><rect x="443.2" y="325" width="746.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode.assoc (11 samples, 4.64%)</title><rect x="313.7" y="101" width="54.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="316.71" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cloju..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (19 samples, 8.02%)</title><rect x="15.0" y="181" width="94.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.pa..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName (1 samples, 0.42%)</title><rect x="303.8" y="181" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="306.76" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (1 samples, 0.42%)</title><rect x="293.8" y="149" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="296.80" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl/fn--9077 (236 samples, 99.58%)</title><rect x="15.0" y="469" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="479.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl/fn--9077</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Compiler.eval (236 samples, 99.58%)</title><rect x="15.0" y="389" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Compiler.eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode.assoc (23 samples, 9.70%)</title><rect x="179.3" y="117" width="114.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.P..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String (1 samples, 0.42%)</title><rect x="303.8" y="149" width="4.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text text-anchor="" x="306.76" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText (2 samples, 0.84%)</title><rect x="293.8" y="197" width="10.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="296.80" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol (5 samples, 2.11%)</title><rect x="418.3" y="181" width="24.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="421.27" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun.nio.cs.StreamDecoder.&lt;init&gt; (1 samples, 0.42%)</title><rect x="443.2" y="117" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clj-async-profiler.core/eval15421 (236 samples, 99.58%)</title><rect x="15.0" y="373" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clj-async-profiler.core/eval15421</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun.nio.cs.StreamDecoder.&lt;init&gt; (1 samples, 0.42%)</title><rect x="443.2" y="101" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>byte[] (1 samples, 0.42%)</title><rect x="443.2" y="53" width="4.9" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.Reader.read (1 samples, 0.42%)</title><rect x="448.1" y="229" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (1 samples, 0.42%)</title><rect x="293.8" y="133" width="5.0" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text text-anchor="" x="296.80" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentArrayMap (6 samples, 2.53%)</title><rect x="388.4" y="149" width="29.9" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text text-anchor="" x="391.40" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$ArrayNode.assoc (23 samples, 9.70%)</title><rect x="179.3" y="133" width="114.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.P..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/copy (123 samples, 51.90%)</title><rect x="448.1" y="277" width="612.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.java.io/copy</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentArrayMap$TransientArrayMap.doPersistent (12 samples, 5.06%)</title><rect x="109.6" y="133" width="59.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="112.58" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojur..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.assoc (23 samples, 9.70%)</title><rect x="179.3" y="181" width="114.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.A..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.base.ParserBase.getNumberValue (1 samples, 0.42%)</title><rect x="169.3" y="181" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="172.32" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$TransientHashMap.doAssoc (11 samples, 4.64%)</title><rect x="313.7" y="117" width="54.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="316.71" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cloju..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.MultiFn.invoke (123 samples, 51.90%)</title><rect x="448.1" y="261" width="612.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.MultiFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/persistent! (6 samples, 2.53%)</title><rect x="388.4" y="213" width="29.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="391.40" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Thread.run (236 samples, 99.58%)</title><rect x="15.0" y="757" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="767.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.Thread.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl/read-eval-print--9068 (236 samples, 99.58%)</title><rect x="15.0" y="453" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="463.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl/read-eval-print--9068</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun.nio.cs.StreamDecoder.read (1 samples, 0.42%)</title><rect x="448.1" y="149" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (25 samples, 10.55%)</title><rect x="1065.5" y="261" width="124.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1068.53" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.util.Array..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName (5 samples, 2.11%)</title><rect x="418.3" y="197" width="24.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="421.27" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/run-next/fn--1599 (236 samples, 99.58%)</title><rect x="15.0" y="693" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="703.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/run-next/fn--1599</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/fn--11392/G--11368--11399 (1 samples, 0.42%)</title><rect x="443.2" y="181" width="4.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/transient (13 samples, 5.49%)</title><rect x="44.9" y="165" width="64.7" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="47.85" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/apply (236 samples, 99.58%)</title><rect x="15.0" y="613" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="623.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/apply</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.core/parse-string (86 samples, 36.29%)</title><rect x="15.0" y="325" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.core/parse-string</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String.&lt;init&gt; (1 samples, 0.42%)</title><rect x="293.8" y="165" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="296.80" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (1 samples, 0.42%)</title><rect x="174.3" y="133" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="177.30" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.assoc (23 samples, 9.70%)</title><rect x="179.3" y="165" width="114.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.A..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.applyTo (1 samples, 0.42%)</title><rect x="443.2" y="277" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap.access$700 (1 samples, 0.42%)</title><rect x="308.7" y="101" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/inputstream--GT-reader (1 samples, 0.42%)</title><rect x="443.2" y="165" width="4.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyToHelper (236 samples, 99.58%)</title><rect x="15.0" y="581" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="591.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.AFn.applyToHelper</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOf (122 samples, 51.48%)</title><rect x="453.1" y="165" width="607.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="456.12" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.util.Arrays.copyOf</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Object[] (23 samples, 9.70%)</title><rect x="179.3" y="101" width="114.5" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.Obje..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String.&lt;init&gt; (5 samples, 2.11%)</title><rect x="418.3" y="165" width="24.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="421.27" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >j..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (236 samples, 99.58%)</title><rect x="15.0" y="645" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="655.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.assoc (16 samples, 6.75%)</title><rect x="308.7" y="197" width="79.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.l..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/reader (1 samples, 0.42%)</title><rect x="443.2" y="229" width="4.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/with-bindings-STAR- (236 samples, 99.58%)</title><rect x="15.0" y="629" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="639.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/with-bindings-STAR-</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/apply (236 samples, 99.58%)</title><rect x="15.0" y="517" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="527.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/apply</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/fn--11508 (123 samples, 51.90%)</title><rect x="448.1" y="245" width="612.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.java.io/fn--11508</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (1 samples, 0.42%)</title><rect x="174.3" y="117" width="5.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text text-anchor="" x="177.30" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.ThreadPoolExecutor$Worker.run (236 samples, 99.58%)</title><rect x="15.0" y="741" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="751.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.util.concurrent.ThreadPoolExecutor$Worker.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (86 samples, 36.29%)</title><rect x="15.0" y="229" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse*</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyTo (236 samples, 99.58%)</title><rect x="15.0" y="597" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="607.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.AFn.applyTo</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (51 samples, 21.52%)</title><rect x="453.1" y="149" width="253.9" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text text-anchor="" x="456.12" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >char[]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.InputStreamReader.&lt;init&gt; (1 samples, 0.42%)</title><rect x="443.2" y="149" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/assoc! (16 samples, 6.75%)</title><rect x="308.7" y="213" width="79.7" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol (1 samples, 0.42%)</title><rect x="303.8" y="165" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="306.76" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.persistent (6 samples, 2.53%)</title><rect x="388.4" y="181" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="391.40" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (86 samples, 36.29%)</title><rect x="15.0" y="261" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse*</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (20 samples, 8.44%)</title><rect x="1090.4" y="245" width="99.6" height="15.0" fill="rgb(205,105,0)" rx="2" ry="2" />
<text text-anchor="" x="1093.42" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >char[]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl (236 samples, 99.58%)</title><rect x="15.0" y="485" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="495.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap.create (11 samples, 4.64%)</title><rect x="313.7" y="149" width="54.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="316.71" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cloju..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.applyTo (236 samples, 99.58%)</title><rect x="15.0" y="501" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="511.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.applyTo</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.persistent (12 samples, 5.06%)</title><rect x="109.6" y="165" width="59.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="112.58" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojur..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/interruptible-eval/fn--1604/fn--1607 (236 samples, 99.58%)</title><rect x="15.0" y="677" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="687.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/interruptible-eval/fn--1604/fn--1607</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.ThreadPoolExecutor.runWorker (236 samples, 99.58%)</title><rect x="15.0" y="725" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="735.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.util.concurrent.ThreadPoolExecutor.runWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentVector$TransientVector.&lt;init&gt; (13 samples, 5.49%)</title><rect x="44.9" y="117" width="64.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="47.85" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken (5 samples, 2.11%)</title><rect x="418.3" y="213" width="24.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="421.27" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.util.TextBuffer.contentsAsString (2 samples, 0.84%)</title><rect x="293.8" y="181" width="10.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="296.80" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clj-async-profiler.core/eval15421/fn--15424/fn--15425 (236 samples, 99.58%)</title><rect x="15.0" y="341" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clj-async-profiler.core/eval15421/fn--15424/fn--15425</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentVector.asTransient (13 samples, 5.49%)</title><rect x="44.9" y="133" width="64.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="47.85" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/fn--11392/G--11368--11399 (1 samples, 0.42%)</title><rect x="443.2" y="213" width="4.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (5 samples, 2.11%)</title><rect x="418.3" y="133" width="24.9" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text text-anchor="" x="421.27" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Compiler.eval (236 samples, 99.58%)</title><rect x="15.0" y="405" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Compiler.eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Integer (1 samples, 0.42%)</title><rect x="169.3" y="149" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="172.32" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.nio.ByteBuffer.allocate (1 samples, 0.42%)</title><rect x="443.2" y="85" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/evaluate/fn--1561 (236 samples, 99.58%)</title><rect x="15.0" y="565" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="575.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/evaluate/fn--1561</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.persistent (12 samples, 5.06%)</title><rect x="109.6" y="149" width="59.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="112.58" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojur..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.util.TextBuffer.contentsAsString (1 samples, 0.42%)</title><rect x="174.3" y="165" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="177.30" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (123 samples, 51.90%)</title><rect x="448.1" y="293" width="612.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (33 samples, 13.92%)</title><rect x="15.0" y="197" width="164.3" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse*</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/assoc! (23 samples, 9.70%)</title><rect x="179.3" y="197" width="114.5" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/a..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode (1 samples, 0.42%)</title><rect x="308.7" y="37" width="5.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl/read-eval-print--9068/fn--9071 (236 samples, 99.58%)</title><rect x="15.0" y="437" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="447.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl/read-eval-print--9068/fn--9071</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String (1 samples, 0.42%)</title><rect x="10.0" y="757" width="5.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="767.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (6 samples, 2.53%)</title><rect x="15.0" y="69" width="29.9" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >ch..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/slurp (150 samples, 63.29%)</title><rect x="443.2" y="309" width="746.8" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/slurp</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.assoc (16 samples, 6.75%)</title><rect x="308.7" y="181" width="79.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.l..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Integer.valueOf (1 samples, 0.42%)</title><rect x="169.3" y="165" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="172.32" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (1 samples, 0.42%)</title><rect x="443.2" y="245" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun.nio.cs.StreamDecoder.forInputStreamReader (1 samples, 0.42%)</title><rect x="443.2" y="133" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentArrayMap$TransientArrayMap.doAssoc (12 samples, 5.06%)</title><rect x="308.7" y="165" width="59.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojur..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.assoc (1 samples, 0.42%)</title><rect x="308.7" y="149" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol (6 samples, 2.53%)</title><rect x="15.0" y="117" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >co..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode.ensureEditable (1 samples, 0.42%)</title><rect x="308.7" y="53" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String.&lt;init&gt; (6 samples, 2.53%)</title><rect x="15.0" y="101" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >ja..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode.assoc (1 samples, 0.42%)</title><rect x="308.7" y="117" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.AbstractStringBuilder.append (122 samples, 51.48%)</title><rect x="453.1" y="197" width="607.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="456.12" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.AbstractStringBuilder.append</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clj-async-profiler.core/eval15421/fn--15424 (236 samples, 99.58%)</title><rect x="15.0" y="357" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clj-async-profiler.core/eval15421/fn--15424</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Object[] (13 samples, 5.49%)</title><rect x="44.9" y="85" width="64.7" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text text-anchor="" x="47.85" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.la..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String.&lt;init&gt; (1 samples, 0.42%)</title><rect x="174.3" y="149" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="177.30" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.StringWriter.toString (26 samples, 10.97%)</title><rect x="1060.5" y="293" width="129.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1063.55" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.io.StringWr..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName (6 samples, 2.53%)</title><rect x="15.0" y="133" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >co..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (86 samples, 36.29%)</title><rect x="15.0" y="277" width="428.2" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse*</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode.assoc (1 samples, 0.42%)</title><rect x="308.7" y="69" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.persistent (6 samples, 2.53%)</title><rect x="388.4" y="197" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="391.40" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.BufferedReader.fill (1 samples, 0.42%)</title><rect x="448.1" y="181" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.java.io/fn--11440 (1 samples, 0.42%)</title><rect x="443.2" y="197" width="4.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$TransientHashMap.doAssoc (4 samples, 1.69%)</title><rect x="368.5" y="165" width="19.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="371.48" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentArrayMap$TransientArrayMap.doPersistent (6 samples, 2.53%)</title><rect x="388.4" y="165" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="391.40" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.BufferedReader.read1 (1 samples, 0.42%)</title><rect x="448.1" y="197" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (59 samples, 24.89%)</title><rect x="15.0" y="213" width="293.7" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cheshire.parse/parse*</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.run (236 samples, 99.58%)</title><rect x="15.0" y="709" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="719.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.AFn.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (5 samples, 2.11%)</title><rect x="418.3" y="149" width="24.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="421.27" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >j..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/evaluate (236 samples, 99.58%)</title><rect x="15.0" y="661" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="671.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/evaluate</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.StringBuffer.toString (26 samples, 10.97%)</title><rect x="1060.5" y="277" width="129.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1063.55" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.String..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$BitmapIndexedNode.assoc (4 samples, 1.69%)</title><rect x="368.5" y="149" width="19.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="371.48" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>refactor-nrepl.ns.slam.hound.regrow/wrap-clojure-repl/fn--10889 (236 samples, 99.58%)</title><rect x="15.0" y="533" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="543.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >refactor-nrepl.ns.slam.hound.regrow/wrap-clojure-repl/fn--10889</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap$TransientHashMap.doAssoc (23 samples, 9.70%)</title><rect x="179.3" y="149" width="114.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="182.28" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.P..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyToHelper (1 samples, 0.42%)</title><rect x="443.2" y="261" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ATransientMap.assoc (11 samples, 4.64%)</title><rect x="313.7" y="133" width="54.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="316.71" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cloju..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentVector$TransientVector.editableRoot (13 samples, 5.49%)</title><rect x="44.9" y="101" width="64.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="47.85" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Object[] (4 samples, 1.69%)</title><rect x="368.5" y="133" width="19.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text text-anchor="" x="371.48" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.nio.HeapByteBuffer.&lt;init&gt; (1 samples, 0.42%)</title><rect x="443.2" y="69" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.nio.HeapCharBuffer (1 samples, 0.42%)</title><rect x="448.1" y="101" width="5.0" height="15.0" fill="rgb(59,174,174)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (5 samples, 2.11%)</title><rect x="1065.5" y="245" width="24.9" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text text-anchor="" x="1068.53" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String (1 samples, 0.42%)</title><rect x="1060.5" y="261" width="5.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text text-anchor="" x="1063.55" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/eval (236 samples, 99.58%)</title><rect x="15.0" y="421" width="1175.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.String (1 samples, 0.42%)</title><rect x="298.8" y="165" width="5.0" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text text-anchor="" x="301.78" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken (1 samples, 0.42%)</title><rect x="303.8" y="197" width="4.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="306.76" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentHashMap.createNode (1 samples, 0.42%)</title><rect x="308.7" y="85" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="311.73" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.StringWriter.write (122 samples, 51.48%)</title><rect x="453.1" y="229" width="607.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="456.12" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.io.StringWriter.write</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>cheshire.parse/parse* (6 samples, 2.53%)</title><rect x="15.0" y="165" width="29.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >ch..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (237 samples, 100%)</title><rect x="10.0" y="773" width="1180.0" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="783.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.AbstractStringBuilder.ensureCapacityInternal (122 samples, 51.48%)</title><rect x="453.1" y="181" width="607.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="456.12" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.AbstractStringBuilder.ensureCapacityInternal</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken (6 samples, 2.53%)</title><rect x="15.0" y="149" width="29.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >co..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (236 samples, 99.58%)</title><rect x="15.0" y="549" width="1175.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.98" y="559.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun.nio.cs.StreamDecoder.implRead (1 samples, 0.42%)</title><rect x="448.1" y="133" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/apply (1 samples, 0.42%)</title><rect x="443.2" y="293" width="4.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="446.16" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.io.InputStreamReader.read (1 samples, 0.42%)</title><rect x="448.1" y="165" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>char[] (71 samples, 29.96%)</title><rect x="707.0" y="149" width="353.5" height="15.0" fill="rgb(196,96,0)" rx="2" ry="2" />
<text text-anchor="" x="710.05" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >char[]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.nio.CharBuffer.wrap (1 samples, 0.42%)</title><rect x="448.1" y="117" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="451.14" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText (1 samples, 0.42%)</title><rect x="174.3" y="181" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="177.30" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.StringBuffer.append (122 samples, 51.48%)</title><rect x="453.1" y="213" width="607.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="456.12" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.StringBuffer.append</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.PersistentVector.asTransient (13 samples, 5.49%)</title><rect x="44.9" y="149" width="64.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="47.85" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure..</text>
</g>
</svg>
