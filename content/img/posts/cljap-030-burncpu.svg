<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="774.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="757" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="757" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (13 samples, 0.18%)</title><rect x="10.0" y="677" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="687.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>jint_disjoint_arraycopy (26 samples, 0.35%)</title><rect x="1174.8" y="117" width="4.1" height="15.0" fill="rgb(247,118,118)" rx="2" ry="2" />
<text text-anchor="" x="1177.77" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8139 (49 samples, 0.67%)</title><rect x="1179.6" y="229" width="7.8" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.58" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/apply (13 samples, 0.18%)</title><rect x="10.0" y="565" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="575.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.divideKnuth (3,344 samples, 45.44%)</title><rect x="571.2" y="69" width="536.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="574.22" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.divideKnuth</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.ThreadPoolExecutor$Worker.run (7,344 samples, 99.80%)</title><rect x="12.1" y="693" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="703.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.util.concurrent.ThreadPoolExecutor$Worker.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.gcd (3,392 samples, 46.09%)</title><rect x="564.0" y="133" width="543.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="567.00" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.BigInteger.gcd</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers.divide (6,730 samples, 91.45%)</title><rect x="29.7" y="149" width="1079.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="32.72" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Numbers.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.multiplyByInt (353 samples, 4.80%)</title><rect x="1122.3" y="133" width="56.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1125.33" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java...</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.locks.LockSupport.parkNanos (10 samples, 0.14%)</title><rect x="10.3" y="389" width="1.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.32" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RT.count (20 samples, 0.27%)</title><rect x="1181.5" y="133" width="3.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1184.50" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.divideKnuth (3,282 samples, 44.60%)</title><rect x="30.4" y="117" width="526.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="33.36" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.BigInteger.divideKnuth</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.multiply (363 samples, 4.93%)</title><rect x="1120.7" y="149" width="58.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1123.73" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.m..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RT.countFrom (14 samples, 0.19%)</title><rect x="18.8" y="117" width="2.3" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="21.82" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/map/fn--5851 (32 samples, 0.43%)</title><rect x="1179.9" y="149" width="5.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.90" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.divideOneWord (3,284 samples, 44.63%)</title><rect x="580.8" y="53" width="526.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="583.84" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.divideOneWord</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RT.countFrom (7 samples, 0.10%)</title><rect x="1182.9" y="117" width="1.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1185.94" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (7,344 samples, 99.80%)</title><rect x="12.1" y="501" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="511.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/map/fn--5851 (50 samples, 0.68%)</title><rect x="15.0" y="149" width="8.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="17.97" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ChunkedCons.chunkedNext (58 samples, 0.79%)</title><rect x="14.3" y="197" width="9.3" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.33" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl/read-eval-print--9068/fn--9071 (7,344 samples, 99.80%)</title><rect x="12.1" y="437" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="447.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl/read-eval-print--9068/fn--9071</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8139 (7,268 samples, 98.76%)</title><rect x="13.7" y="229" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core.protocols/fn--8139</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyToHelper (13 samples, 0.18%)</title><rect x="10.0" y="613" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="623.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/with-bindings-STAR- (13 samples, 0.18%)</title><rect x="10.0" y="581" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="591.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Compiler.eval (7,344 samples, 99.80%)</title><rect x="12.1" y="389" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Compiler.eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8131 (59 samples, 0.80%)</title><rect x="1179.3" y="277" width="9.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.26" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot.user/eval3094 (7,344 samples, 99.80%)</title><rect x="12.1" y="373" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot.user/eval3094</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/reduce (7,268 samples, 98.76%)</title><rect x="13.7" y="309" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/reduce</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.multiplyByInt (12 samples, 0.16%)</title><rect x="1118.3" y="133" width="1.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1121.32" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ArrayChunk.reduce (15 samples, 0.20%)</title><rect x="1185.0" y="213" width="2.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1188.03" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.LazySeq.sval (32 samples, 0.43%)</title><rect x="1179.9" y="165" width="5.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1182.90" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/evaluate/fn--1588 (7,344 samples, 99.80%)</title><rect x="12.1" y="517" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="527.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/evaluate/fn--1588</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill (11 samples, 0.15%)</title><rect x="10.2" y="405" width="1.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.16" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.divide (3,282 samples, 44.60%)</title><rect x="30.4" y="133" width="526.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="33.36" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.BigInteger.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/chunk-next (61 samples, 0.83%)</title><rect x="13.8" y="213" width="9.8" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.85" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/+ (12 samples, 0.16%)</title><rect x="1185.3" y="197" width="2.0" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1188.35" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot.user/test-sum (60 samples, 0.82%)</title><rect x="1179.1" y="325" width="9.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.10" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ChunkedCons.chunkedNext (34 samples, 0.46%)</title><rect x="1179.6" y="197" width="5.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1182.58" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.divide (3,345 samples, 45.45%)</title><rect x="571.1" y="101" width="536.3" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="574.06" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/bound-fn-STAR-/fn--5734 (13 samples, 0.18%)</title><rect x="10.0" y="661" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="671.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (7,344 samples, 99.80%)</title><rect x="12.1" y="597" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="607.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.run (7,344 samples, 99.80%)</title><rect x="12.1" y="661" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="671.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.AFn.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.&lt;init&gt; (10 samples, 0.14%)</title><rect x="569.5" y="101" width="1.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="572.45" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers.add (11 samples, 0.15%)</title><rect x="1185.5" y="181" width="1.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1188.51" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.divide (3,345 samples, 45.45%)</title><rect x="571.1" y="85" width="536.3" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="574.06" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers$RatioOps.divide (7,177 samples, 97.53%)</title><rect x="28.1" y="165" width="1150.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="31.12" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Numbers$RatioOps.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.ArrayChunk.reduce (7,206 samples, 97.92%)</title><rect x="23.6" y="213" width="1155.5" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="26.63" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.ArrayChunk.reduce</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyTo (7,344 samples, 99.80%)</title><rect x="12.1" y="549" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="559.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.AFn.applyTo</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/apply (7,344 samples, 99.80%)</title><rect x="12.1" y="565" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="575.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/apply</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (7,359 samples, 100%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(211,66,66)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="735.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/run-next/fn--1626 (7,344 samples, 99.80%)</title><rect x="12.1" y="645" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="655.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/run-next/fn--1626</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8099/G--8094--8108 (49 samples, 0.67%)</title><rect x="1179.6" y="245" width="7.8" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.58" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8073/G--8068--8086 (7,268 samples, 98.76%)</title><rect x="13.7" y="293" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core.protocols/fn--8073/G--8068--8086</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/with-bindings-STAR- (7,344 samples, 99.80%)</title><rect x="12.1" y="581" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="591.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/with-bindings-STAR-</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/eval (7,344 samples, 99.80%)</title><rect x="12.1" y="421" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core/eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot.user/burn-cpu (7,343 samples, 99.78%)</title><rect x="12.1" y="341" width="1177.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot.user/burn-cpu</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl/read-eval-print--9068 (7,344 samples, 99.80%)</title><rect x="12.1" y="453" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="463.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl/read-eval-print--9068</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Parker::park(bool, long) (9 samples, 0.12%)</title><rect x="10.5" y="341" width="1.4" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text text-anchor="" x="13.48" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RT.count (31 samples, 0.42%)</title><rect x="17.7" y="133" width="5.0" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="20.70" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>jlong_disjoint_arraycopy (41 samples, 0.56%)</title><rect x="557.4" y="117" width="6.6" height="15.0" fill="rgb(223,84,84)" rx="2" ry="2" />
<text text-anchor="" x="560.43" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Unsafe_Park (10 samples, 0.14%)</title><rect x="10.3" y="357" width="1.6" height="15.0" fill="rgb(218,76,76)" rx="2" ry="2" />
<text text-anchor="" x="13.32" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.equals (46 samples, 0.63%)</title><rect x="556.6" y="133" width="7.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="559.63" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>reply.eval-modes.nrepl/poll-for-responses (13 samples, 0.18%)</title><rect x="10.0" y="501" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="511.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.transport/fn-transport/fn--386 (13 samples, 0.18%)</title><rect x="10.0" y="453" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="463.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.ThreadPoolExecutor.runWorker (7,344 samples, 99.80%)</title><rect x="12.1" y="677" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="687.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.util.concurrent.ThreadPoolExecutor.runWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__psynch_cvwait (9 samples, 0.12%)</title><rect x="10.5" y="325" width="1.4" height="15.0" fill="rgb(243,112,112)" rx="2" ry="2" />
<text text-anchor="" x="13.48" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun.misc.Unsafe.park (10 samples, 0.14%)</title><rect x="10.3" y="373" width="1.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.32" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.lang.Thread.run (7,357 samples, 99.97%)</title><rect x="10.0" y="709" width="1179.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="719.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.lang.Thread.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.hybridGCD (3,375 samples, 45.86%)</title><rect x="566.2" y="117" width="541.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="569.25" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.hybridGCD</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl (7,344 samples, 99.80%)</title><rect x="12.1" y="485" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="495.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers.divide (7,195 samples, 97.77%)</title><rect x="25.4" y="181" width="1153.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="28.39" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Numbers.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/evaluate (7,344 samples, 99.80%)</title><rect x="12.1" y="613" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="623.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/evaluate</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyToHelper (13 samples, 0.18%)</title><rect x="10.0" y="533" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="543.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>reply.eval-modes.nrepl/main/fn--1519 (13 samples, 0.18%)</title><rect x="10.0" y="517" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="527.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core// (7,196 samples, 97.79%)</title><rect x="25.2" y="197" width="1153.9" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="28.23" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core//</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/reduce (59 samples, 0.80%)</title><rect x="1179.3" y="309" width="9.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.26" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers.toRatio (74 samples, 1.01%)</title><rect x="1108.9" y="149" width="11.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1111.86" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.clear (7 samples, 0.10%)</title><rect x="35.0" y="85" width="1.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="38.01" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers$LongOps.combine (7 samples, 0.10%)</title><rect x="27.0" y="165" width="1.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="30.00" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8073/G--8068--8086 (59 samples, 0.80%)</title><rect x="1179.3" y="293" width="9.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.26" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/apply (13 samples, 0.18%)</title><rect x="10.0" y="645" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="655.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.run (13 samples, 0.18%)</title><rect x="10.0" y="693" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="703.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.LazySeq.sval (56 samples, 0.76%)</title><rect x="14.7" y="165" width="8.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.65" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/seq-reduce (7,268 samples, 98.76%)</title><rect x="13.7" y="261" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core.protocols/seq-reduce</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.transport.FnTransport.recv (13 samples, 0.18%)</title><rect x="10.0" y="469" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="479.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.&lt;init&gt; (20 samples, 0.27%)</title><rect x="577.0" y="53" width="3.2" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="579.99" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (7 samples, 0.10%)</title><rect x="578.3" y="37" width="1.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="581.27" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.shiftLeft (38 samples, 0.52%)</title><rect x="1166.1" y="117" width="6.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1169.11" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.LazySeq.seq (34 samples, 0.46%)</title><rect x="1179.6" y="181" width="5.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1182.58" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot.user/test-div (7,268 samples, 98.76%)</title><rect x="13.7" y="325" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot.user/test-div</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl.middleware.interruptible-eval/interruptible-eval/fn--1631/fn--1634 (7,344 samples, 99.80%)</title><rect x="12.1" y="629" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="639.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl.middleware.interruptible-eval/interruptible-eval/fn--1631/fn--1634</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyToHelper (7,344 samples, 99.80%)</title><rect x="12.1" y="533" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="543.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.AFn.applyToHelper</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.divideKnuth (3,266 samples, 44.38%)</title><rect x="32.6" y="101" width="523.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="35.61" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.divideKnuth</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>itable stub (10 samples, 0.14%)</title><rect x="21.1" y="117" width="1.6" height="15.0" fill="rgb(217,76,76)" rx="2" ry="2" />
<text text-anchor="" x="24.06" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.invoke (13 samples, 0.18%)</title><rect x="10.0" y="597" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="607.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot.user/eval3094/fn--3095 (7,343 samples, 99.78%)</title><rect x="12.1" y="357" width="1177.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot.user/eval3094/fn--3095</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.RestFn.applyTo (13 samples, 0.18%)</title><rect x="10.0" y="629" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="639.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core/chunk-next (34 samples, 0.46%)</title><rect x="1179.6" y="213" width="5.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.58" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.&lt;init&gt; (11 samples, 0.15%)</title><rect x="1115.0" y="101" width="1.7" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1117.96" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>jlong_disjoint_arraycopy (27 samples, 0.37%)</title><rect x="1167.9" y="101" width="4.3" height="15.0" fill="rgb(203,55,55)" rx="2" ry="2" />
<text text-anchor="" x="1170.87" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8099/G--8094--8108 (7,268 samples, 98.76%)</title><rect x="13.7" y="245" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core.protocols/fn--8099/G--8094--8108</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.AFn.applyTo (13 samples, 0.18%)</title><rect x="10.0" y="549" width="2.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="559.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.&lt;init&gt; (12 samples, 0.16%)</title><rect x="30.7" y="101" width="1.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="33.68" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.LazySeq.seq (58 samples, 0.79%)</title><rect x="14.3" y="181" width="9.3" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="17.33" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.SynchronousQueue.poll (12 samples, 0.16%)</title><rect x="10.2" y="437" width="1.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.16" y="447.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.compare (46 samples, 0.63%)</title><rect x="36.1" y="85" width="7.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="39.14" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.BigInteger.valueOf (37 samples, 0.50%)</title><rect x="1111.8" y="117" width="5.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1114.75" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>reply.eval-modes.nrepl/poll-for-responses/fn--1511 (13 samples, 0.18%)</title><rect x="10.0" y="485" width="2.1" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="495.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOfRange (16 samples, 0.22%)</title><rect x="1172.2" y="117" width="2.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1175.20" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.divideOneWord (3,198 samples, 43.46%)</title><rect x="43.5" y="85" width="512.8" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="46.51" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java.math.MutableBigInteger.divideOneWord</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.main/repl/fn--9077 (7,344 samples, 99.80%)</title><rect x="12.1" y="469" width="1177.6" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="479.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.main/repl/fn--9077</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.math.MutableBigInteger.&lt;init&gt; (9 samples, 0.12%)</title><rect x="564.8" y="117" width="1.4" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="567.80" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/fn--8131 (7,268 samples, 98.76%)</title><rect x="13.7" y="277" width="1165.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="16.69" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.core.protocols/fn--8131</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Numbers.toBigInteger (38 samples, 0.52%)</title><rect x="1111.6" y="133" width="6.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="1114.59" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.concurrent.SynchronousQueue$TransferStack.transfer (12 samples, 0.16%)</title><rect x="10.2" y="421" width="1.9" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="13.16" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.lang.Compiler.eval (7,344 samples, 99.80%)</title><rect x="12.1" y="405" width="1177.6" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="15.08" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure.lang.Compiler.eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java.util.Arrays.copyOf (7 samples, 0.10%)</title><rect x="565.1" y="101" width="1.1" height="15.0" fill="rgb(145,220,81)" rx="2" ry="2" />
<text text-anchor="" x="568.12" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure.core.protocols/seq-reduce (59 samples, 0.80%)</title><rect x="1179.3" y="261" width="9.4" height="15.0" fill="rgb(143,181,254)" rx="2" ry="2" />
<text text-anchor="" x="1182.26" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
