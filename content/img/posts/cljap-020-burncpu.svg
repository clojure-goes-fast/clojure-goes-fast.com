<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="950.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="933" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="933" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8139.invoke (25 samples, 0.60%)</title><rect x="1181.3" y="261" width="7.0" height="15.0" fill="rgb(206,58,58)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/LazySeq.seq (28 samples, 0.67%)</title><rect x="14.5" y="197" width="7.9" height="15.0" fill="rgb(225,87,87)" rx="2" ry="2" />
<text text-anchor="" x="17.49" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8139.invoke (4,152 samples, 98.83%)</title><rect x="13.9" y="261" width="1166.3" height="15.0" fill="rgb(207,61,61)" rx="2" ry="2" />
<text text-anchor="" x="16.93" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$fn__8139.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Numbers.toRatio (101 samples, 2.40%)</title><rect x="1049.8" y="149" width="28.4" height="15.0" fill="rgb(217,75,75)" rx="2" ry="2" />
<text text-anchor="" x="1052.84" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >cl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.divide (1,766 samples, 42.04%)</title><rect x="553.2" y="101" width="496.1" height="15.0" fill="rgb(79,227,79)" rx="2" ry="2" />
<text text-anchor="" x="556.23" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$eval3062$fn__3063.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="453" width="1178.4" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="463.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$eval3062$fn__3063.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Compiler.eval (4,195 samples, 99.86%)</title><rect x="10.8" y="501" width="1178.4" height="15.0" fill="rgb(217,75,75)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="511.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/Compiler.eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$seq_reduce.invokeStatic (4,154 samples, 98.88%)</title><rect x="13.4" y="293" width="1166.8" height="15.0" fill="rgb(229,93,93)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$seq_reduce.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8099$G__8094__8108.invoke (26 samples, 0.62%)</title><rect x="1181.0" y="277" width="7.3" height="15.0" fill="rgb(240,108,108)" rx="2" ry="2" />
<text text-anchor="" x="1184.01" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$eval.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="549" width="1178.4" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="559.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$eval.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/AFn.applyTo (4,195 samples, 99.86%)</title><rect x="10.8" y="693" width="1178.4" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="703.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/AFn.applyTo</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8099$G__8094__8108.invoke (4,152 samples, 98.83%)</title><rect x="13.9" y="277" width="1166.3" height="15.0" fill="rgb(218,77,77)" rx="2" ry="2" />
<text text-anchor="" x="16.93" y="287.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$fn__8099$G__8094__8108.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/main$repl$read_eval_print__9068.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="581" width="1178.4" height="15.0" fill="rgb(238,105,105)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="591.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/main$repl$read_eval_print__9068.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$chunk_next.invokeStatic (17 samples, 0.40%)</title><rect x="1181.3" y="229" width="4.8" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8073$G__8068__8086.invoke (4,154 samples, 98.88%)</title><rect x="13.4" y="341" width="1166.8" height="15.0" fill="rgb(233,98,98)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$fn__8073$G__8068__8086.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>jlong_disjoint_arraycopy (57 samples, 1.36%)</title><rect x="1060.2" y="117" width="16.0" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text text-anchor="" x="1063.23" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$_SLASH_.invokeStatic (4,110 samples, 97.83%)</title><rect x="24.0" y="197" width="1154.5" height="15.0" fill="rgb(251,125,125)" rx="2" ry="2" />
<text text-anchor="" x="27.04" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$_SLASH_.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$burn_cpu.invoke (4,193 samples, 99.81%)</title><rect x="10.8" y="437" width="1177.8" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="447.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$burn_cpu.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Numbers$RatioOps.divide (4,099 samples, 97.57%)</title><rect x="26.9" y="165" width="1151.3" height="15.0" fill="rgb(211,66,66)" rx="2" ry="2" />
<text text-anchor="" x="29.85" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/Numbers$RatioOps.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8131.invoke (28 samples, 0.67%)</title><rect x="1180.4" y="325" width="7.9" height="15.0" fill="rgb(213,69,69)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.divideOneWord (1,718 samples, 40.90%)</title><rect x="53.0" y="85" width="482.5" height="15.0" fill="rgb(87,234,87)" rx="2" ry="2" />
<text text-anchor="" x="55.98" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.divideOneWord</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$seq_reduce.invokeStatic (28 samples, 0.67%)</title><rect x="1180.4" y="293" width="7.9" height="15.0" fill="rgb(248,121,121)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="303.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$test_div.invoke (4,154 samples, 98.88%)</title><rect x="13.4" y="405" width="1166.8" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$test_div.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.copyOf (11 samples, 0.26%)</title><rect x="546.8" y="101" width="3.1" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text text-anchor="" x="549.77" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl/middleware/interruptible_eval$evaluate.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="789" width="1178.4" height="15.0" fill="rgb(240,108,108)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="799.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl/middleware/interruptible_eval$evaluate.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>jlong_disjoint_arraycopy (57 samples, 1.36%)</title><rect x="1145.6" y="101" width="16.0" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text text-anchor="" x="1148.62" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.copyOfRange (19 samples, 0.45%)</title><rect x="558.3" y="37" width="5.3" height="15.0" fill="rgb(95,242,95)" rx="2" ry="2" />
<text text-anchor="" x="561.29" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl/middleware/interruptible_eval$evaluate.invokeStatic (4,195 samples, 99.86%)</title><rect x="10.8" y="773" width="1178.4" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="783.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl/middleware/interruptible_eval$evaluate.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$test_div.invokeStatic (4,154 samples, 98.88%)</title><rect x="13.4" y="389" width="1166.8" height="15.0" fill="rgb(235,101,101)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$test_div.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/AFn.applyToHelper (4,195 samples, 99.86%)</title><rect x="10.8" y="677" width="1178.4" height="15.0" fill="rgb(249,121,121)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="687.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/AFn.applyToHelper</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.divide (1,766 samples, 42.04%)</title><rect x="553.2" y="85" width="496.1" height="15.0" fill="rgb(64,213,64)" rx="2" ry="2" />
<text text-anchor="" x="556.23" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/main$repl.doInvoke (4,195 samples, 99.86%)</title><rect x="10.8" y="629" width="1178.4" height="15.0" fill="rgb(216,73,73)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="639.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/main$repl.doInvoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$apply.invokeStatic (4,195 samples, 99.86%)</title><rect x="10.8" y="709" width="1178.4" height="15.0" fill="rgb(209,64,64)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="719.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$apply.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl/middleware/interruptible_eval$evaluate$fn__1588.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="661" width="1178.4" height="15.0" fill="rgb(237,103,103)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="671.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl/middleware/interruptible_eval$evaluate$fn__1588.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/main$repl$read_eval_print__9068$fn__9071.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="565" width="1178.4" height="15.0" fill="rgb(208,62,62)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="575.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/main$repl$read_eval_print__9068$fn__9071.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8131.invokeStatic (4,154 samples, 98.88%)</title><rect x="13.4" y="309" width="1166.8" height="15.0" fill="rgb(223,84,84)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$fn__8131.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.clear (8 samples, 0.19%)</title><rect x="46.5" y="85" width="2.3" height="15.0" fill="rgb(69,217,69)" rx="2" ry="2" />
<text text-anchor="" x="49.52" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$eval3062.invokeStatic (4,195 samples, 99.86%)</title><rect x="10.8" y="469" width="1178.4" height="15.0" fill="rgb(251,125,125)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="479.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$eval3062.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8139.invokeStatic (25 samples, 0.60%)</title><rect x="1181.3" y="245" width="7.0" height="15.0" fill="rgb(231,95,95)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.divideOneWord (1,727 samples, 41.11%)</title><rect x="564.2" y="53" width="485.1" height="15.0" fill="rgb(71,220,71)" rx="2" ry="2" />
<text text-anchor="" x="567.19" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.divideOneWord</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$with_bindings_STAR_.doInvoke (4,195 samples, 99.86%)</title><rect x="10.8" y="741" width="1178.4" height="15.0" fill="rgb(217,75,75)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="751.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$with_bindings_STAR_.doInvoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$chunk_next.invokeStatic (30 samples, 0.71%)</title><rect x="13.9" y="229" width="8.5" height="15.0" fill="rgb(212,67,67)" rx="2" ry="2" />
<text text-anchor="" x="16.93" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.&lt;init&gt; (11 samples, 0.26%)</title><rect x="1057.1" y="101" width="3.1" height="15.0" fill="rgb(58,207,58)" rx="2" ry="2" />
<text text-anchor="" x="1060.14" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Compiler.eval (4,195 samples, 99.86%)</title><rect x="10.8" y="517" width="1178.4" height="15.0" fill="rgb(207,61,61)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="527.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/Compiler.eval</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.multiply (356 samples, 8.47%)</title><rect x="1078.2" y="149" width="100.0" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text text-anchor="" x="1081.21" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/Bi..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$reduce.invoke (4,154 samples, 98.88%)</title><rect x="13.4" y="373" width="1166.8" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$reduce.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/LazySeq.sval (25 samples, 0.60%)</title><rect x="15.1" y="181" width="7.0" height="15.0" fill="rgb(232,96,96)" rx="2" ry="2" />
<text text-anchor="" x="18.06" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/RT.countFrom (8 samples, 0.19%)</title><rect x="1183.8" y="133" width="2.3" height="15.0" fill="rgb(231,95,95)" rx="2" ry="2" />
<text text-anchor="" x="1186.82" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$with_bindings_STAR_.invokeStatic (4,195 samples, 99.86%)</title><rect x="10.8" y="725" width="1178.4" height="15.0" fill="rgb(252,126,126)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="735.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$with_bindings_STAR_.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,197 samples, 99.90%)</title><rect x="10.8" y="853" width="1178.9" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="863.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8139.invokeStatic (4,152 samples, 98.83%)</title><rect x="13.9" y="245" width="1166.3" height="15.0" fill="rgb(217,75,75)" rx="2" ry="2" />
<text text-anchor="" x="16.93" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$fn__8139.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Numbers.divide (3,639 samples, 86.62%)</title><rect x="27.7" y="149" width="1022.1" height="15.0" fill="rgb(222,82,82)" rx="2" ry="2" />
<text text-anchor="" x="30.70" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/Numbers.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Thread.run (4,200 samples, 99.98%)</title><rect x="10.0" y="885" width="1179.7" height="15.0" fill="rgb(75,223,75)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="895.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/lang/Thread.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.compare (15 samples, 0.36%)</title><rect x="48.8" y="85" width="4.2" height="15.0" fill="rgb(71,219,71)" rx="2" ry="2" />
<text text-anchor="" x="51.76" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/main$repl$fn__9077.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="597" width="1178.4" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="607.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/main$repl$fn__9077.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$map$fn__5851.invoke (25 samples, 0.60%)</title><rect x="15.1" y="165" width="7.0" height="15.0" fill="rgb(213,69,69)" rx="2" ry="2" />
<text text-anchor="" x="18.06" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,197 samples, 99.90%)</title><rect x="10.8" y="869" width="1178.9" height="15.0" fill="rgb(54,204,54)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="879.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/LazySeq.seq (17 samples, 0.40%)</title><rect x="1181.3" y="197" width="4.8" height="15.0" fill="rgb(224,85,85)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/ChunkedCons.chunkedNext (29 samples, 0.69%)</title><rect x="14.2" y="213" width="8.2" height="15.0" fill="rgb(243,112,112)" rx="2" ry="2" />
<text text-anchor="" x="17.21" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$reduce.invoke (28 samples, 0.67%)</title><rect x="1180.4" y="373" width="7.9" height="15.0" fill="rgb(251,124,124)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="383.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Numbers.divide (4,108 samples, 97.79%)</title><rect x="24.6" y="181" width="1153.9" height="15.0" fill="rgb(249,122,122)" rx="2" ry="2" />
<text text-anchor="" x="27.61" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/Numbers.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/ArrayChunk.reduce (4,121 samples, 98.10%)</title><rect x="22.6" y="229" width="1157.6" height="15.0" fill="rgb(233,98,98)" rx="2" ry="2" />
<text text-anchor="" x="25.64" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/ArrayChunk.reduce</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$reduce.invokeStatic (4,154 samples, 98.88%)</title><rect x="13.4" y="357" width="1166.8" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$reduce.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.divide (1,814 samples, 43.18%)</title><rect x="29.4" y="133" width="509.5" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text text-anchor="" x="32.38" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/BigInteger.divide</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl/middleware/interruptible_eval$run_next$fn__1626.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="821" width="1178.4" height="15.0" fill="rgb(209,63,63)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="831.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl/middleware/interruptible_eval$run_next$fn__1626.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.&lt;init&gt; (23 samples, 0.55%)</title><rect x="557.2" y="53" width="6.4" height="15.0" fill="rgb(52,202,52)" rx="2" ry="2" />
<text text-anchor="" x="560.16" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.toBigInteger (12 samples, 0.29%)</title><rect x="535.5" y="101" width="3.4" height="15.0" fill="rgb(93,239,93)" rx="2" ry="2" />
<text text-anchor="" x="538.54" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/RT.count (8 samples, 0.19%)</title><rect x="1183.8" y="149" width="2.3" height="15.0" fill="rgb(241,110,110)" rx="2" ry="2" />
<text text-anchor="" x="1186.82" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$test_sum.invokeStatic (28 samples, 0.67%)</title><rect x="1180.4" y="389" width="7.9" height="15.0" fill="rgb(230,94,94)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="399.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.gcd (1,797 samples, 42.78%)</title><rect x="544.8" y="133" width="504.8" height="15.0" fill="rgb(56,205,56)" rx="2" ry="2" />
<text text-anchor="" x="547.81" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/BigInteger.gcd</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$burn_cpu.invokeStatic (4,193 samples, 99.81%)</title><rect x="10.8" y="421" width="1177.8" height="15.0" fill="rgb(227,90,90)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="431.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$burn_cpu.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/ChunkedCons.chunkedNext (17 samples, 0.40%)</title><rect x="1181.3" y="213" width="4.8" height="15.0" fill="rgb(235,102,102)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.&lt;init&gt; (12 samples, 0.29%)</title><rect x="546.5" y="117" width="3.4" height="15.0" fill="rgb(55,204,55)" rx="2" ry="2" />
<text text-anchor="" x="549.49" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/RestFn.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="757" width="1178.4" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="767.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8131.invokeStatic (28 samples, 0.67%)</title><rect x="1180.4" y="309" width="7.9" height="15.0" fill="rgb(207,60,60)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="319.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.copyOfRange (9 samples, 0.21%)</title><rect x="1161.6" y="117" width="2.6" height="15.0" fill="rgb(60,209,60)" rx="2" ry="2" />
<text text-anchor="" x="1164.63" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8073$G__8068__8086.invoke (28 samples, 0.67%)</title><rect x="1180.4" y="341" width="7.9" height="15.0" fill="rgb(243,113,113)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="351.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.equals (21 samples, 0.50%)</title><rect x="538.9" y="133" width="5.9" height="15.0" fill="rgb(93,240,93)" rx="2" ry="2" />
<text text-anchor="" x="541.91" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.multiplyByInt (349 samples, 8.31%)</title><rect x="1080.2" y="133" width="98.0" height="15.0" fill="rgb(108,253,108)" rx="2" ry="2" />
<text text-anchor="" x="1083.17" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/B..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.divideKnuth (1,765 samples, 42.01%)</title><rect x="553.5" y="69" width="495.8" height="15.0" fill="rgb(98,244,98)" rx="2" ry="2" />
<text text-anchor="" x="556.51" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.divideKnuth</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$eval3062.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="485" width="1178.4" height="15.0" fill="rgb(202,54,54)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="495.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >boot/user$eval3062.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (4,201 samples, 100%)</title><rect x="10.0" y="901" width="1180.0" height="15.0" fill="rgb(218,76,76)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="911.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.shiftLeft (65 samples, 1.55%)</title><rect x="1143.4" y="117" width="18.2" height="15.0" fill="rgb(103,248,103)" rx="2" ry="2" />
<text text-anchor="" x="1146.37" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/ArrayChunk.reduce (8 samples, 0.19%)</title><rect x="1186.1" y="229" width="2.2" height="15.0" fill="rgb(212,68,68)" rx="2" ry="2" />
<text text-anchor="" x="1189.07" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$_SLASH_.invoke (4,110 samples, 97.83%)</title><rect x="24.0" y="213" width="1154.5" height="15.0" fill="rgb(247,118,118)" rx="2" ry="2" />
<text text-anchor="" x="27.04" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$_SLASH_.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.valueOf (21 samples, 0.50%)</title><rect x="1054.3" y="117" width="5.9" height="15.0" fill="rgb(56,206,56)" rx="2" ry="2" />
<text text-anchor="" x="1057.33" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/BigInteger.divideKnuth (1,812 samples, 43.13%)</title><rect x="29.9" y="117" width="509.0" height="15.0" fill="rgb(73,221,73)" rx="2" ry="2" />
<text text-anchor="" x="32.94" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/BigInteger.divideKnuth</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/RestFn.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="645" width="1178.4" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="655.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/RestFn.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/AFn.run (4,195 samples, 99.86%)</title><rect x="10.8" y="837" width="1178.4" height="15.0" fill="rgb(253,127,127)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="847.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/lang/AFn.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/RT.count (8 samples, 0.19%)</title><rect x="19.8" y="149" width="2.3" height="15.0" fill="rgb(211,67,67)" rx="2" ry="2" />
<text text-anchor="" x="22.83" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nrepl/middleware/interruptible_eval$interruptible_eval$fn__1631$fn__1634.invoke (4,195 samples, 99.86%)</title><rect x="10.8" y="805" width="1178.4" height="15.0" fill="rgb(218,76,76)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="815.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >nrepl/middleware/interruptible_eval$interruptible_eval$fn__1631$fn__1634.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>jint_disjoint_arraycopy (50 samples, 1.19%)</title><rect x="1164.2" y="117" width="14.0" height="15.0" fill="rgb(204,57,57)" rx="2" ry="2" />
<text text-anchor="" x="1167.16" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.divideKnuth (1,793 samples, 42.68%)</title><rect x="31.9" y="101" width="503.6" height="15.0" fill="rgb(89,235,89)" rx="2" ry="2" />
<text text-anchor="" x="34.91" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.divideKnuth</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$map$fn__5851.invoke (17 samples, 0.40%)</title><rect x="1181.3" y="165" width="4.8" height="15.0" fill="rgb(218,76,76)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/main$repl.invokeStatic (4,195 samples, 99.86%)</title><rect x="10.8" y="613" width="1178.4" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="623.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/main$repl.invokeStatic</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/math/MutableBigInteger.hybridGCD (1,778 samples, 42.32%)</title><rect x="549.9" y="117" width="499.4" height="15.0" fill="rgb(54,203,54)" rx="2" ry="2" />
<text text-anchor="" x="552.86" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >java/math/MutableBigInteger.hybridGCD</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core/protocols$fn__8131.invoke (4,154 samples, 98.88%)</title><rect x="13.4" y="325" width="1166.8" height="15.0" fill="rgb(250,123,123)" rx="2" ry="2" />
<text text-anchor="" x="16.37" y="335.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core/protocols$fn__8131.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>boot/user$test_sum.invoke (29 samples, 0.69%)</title><rect x="1180.2" y="405" width="8.1" height="15.0" fill="rgb(248,120,120)" rx="2" ry="2" />
<text text-anchor="" x="1183.17" y="415.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/LazySeq.sval (17 samples, 0.40%)</title><rect x="1181.3" y="181" width="4.8" height="15.0" fill="rgb(229,92,92)" rx="2" ry="2" />
<text text-anchor="" x="1184.29" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/lang/Numbers.toBigInteger (90 samples, 2.14%)</title><rect x="1051.0" y="133" width="25.2" height="15.0" fill="rgb(201,52,52)" rx="2" ry="2" />
<text text-anchor="" x="1053.96" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >c..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$reduce.invokeStatic (28 samples, 0.67%)</title><rect x="1180.4" y="357" width="7.9" height="15.0" fill="rgb(215,72,72)" rx="2" ry="2" />
<text text-anchor="" x="1183.45" y="367.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>clojure/core$eval.invokeStatic (4,195 samples, 99.86%)</title><rect x="10.8" y="533" width="1178.4" height="15.0" fill="rgb(244,114,114)" rx="2" ry="2" />
<text text-anchor="" x="13.84" y="543.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >clojure/core$eval.invokeStatic</text>
</g>
</svg>
